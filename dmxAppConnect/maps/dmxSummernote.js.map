{"version":3,"sources":["components/summernote.js"],"names":["dmx","Component","constructor","node","parent","this","onBlur","bind","onChange","onEnter","onFocus","onInit","setValue","config","popover","$","summernote","options","callbacks","plugins","buttons","BaseComponent","call","initialData","disabled","value","attributes","type","String","default","Boolean","Object","height","Number","min-height","max-height","autofocus","lang","air-mode","toolbar","Array","toolbar-image","toolbar-link","toolbar-table","toolbar-air","blockquote-breaking-level","style-tags","font-names","font-names-ignore-check","font-size-units","line-heights","placeholder","dialogs-in-body","dialogs-fade","disable-drop","disable-shortcuts","disable-tab","disable-spellcheck","disable-grammar","methods","disable","editor","set","empty","enable","insertText","str","pasteHTML","redo","reset","undo","status","message","layoutInfo","find","html","info","success","warning","danger","invoke","action","events","blur","Event","change","changed","enter","focus","init","input","updated","buttonclick","orgValue","code","dispatchEvent","self","nextTick","toCamelCase","replace","a","b","toUpperCase","$parseAttributes","prototype","dom","getAttributes","forEach","attr","name","$addBinding","argument","extend","icon","context","ui","button","contents","tooltip","click","parse","render","$node","mounted","tagName","trim","innerHTML","indexOf","update","props","equal","destroy","initEditor","oldValue","data","updating","isUpdated","beforeDestroy","clone","minHeight","maxHeight","airMode","dialogsInBody","dialogsFade","disableDragAndDrop","shortcuts","tabDisable","spellCheck","disableGrammar","blockquoteBreakingLevel","isArray","filter","group","length","image","link","table","air","styleTags","fontNames","fontNamesIgnoreCheck","fontSizeUnits","lineHeights","console","error","log","statusbar","remove","hasAttribute","getAttribute"],"mappings":"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","file":"../dmxSummernote/dmxSummernote.js","sourcesContent":["dmx.Component('summernote', {\r\n\r\n    constructor: function(node, parent) {\r\n        this.onBlur = this.onBlur.bind(this);\r\n        this.onChange = this.onChange.bind(this);\r\n        this.onEnter = this.onEnter.bind(this);\r\n        this.onFocus = this.onFocus.bind(this);\r\n        this.onInit = this.onInit.bind(this);\r\n        this.setValue = this.setValue.bind(this);\r\n\r\n        this.config = {\r\n            popover: $.summernote.options.popover\r\n        };\r\n\r\n        this.callbacks = { callbacks: {\r\n            onBlur: this.onBlur,\r\n            onChange: this.onChange,\r\n            onEnter: this.onEnter,\r\n            onFocus: this.onFocus,\r\n            onInit: this.onInit,\r\n        }};\r\n\r\n        this.plugins = {};\r\n        this.buttons = { buttons: {}};\r\n        \r\n        dmx.BaseComponent.call(this, node, parent);\r\n    },\r\n\r\n    initialData: {\r\n        disabled: false,\r\n        value: '',\r\n    },\r\n\r\n    attributes: {\r\n        'value': {\r\n            type: String,\r\n            default: ''\r\n        },\r\n\r\n        'disabled': {\r\n            type: Boolean,\r\n            default: false\r\n        },\r\n\r\n        'config': {\r\n            type: Object,\r\n            default: {}\r\n        },\r\n\r\n        'height': {\r\n            type: Number,\r\n            default: null\r\n        },\r\n\r\n        'min-height': {\r\n            type: Number,\r\n            default: null\r\n        },\r\n\r\n        'max-height': {\r\n            type: Number,\r\n            default: null\r\n        },\r\n\r\n        'autofocus': {\r\n            type: Boolean,\r\n            default: false\r\n        },\r\n\r\n        'lang': {\r\n            type: String,\r\n            default: 'en-US'\r\n        },\r\n\r\n        'air-mode': {\r\n            type: Boolean,\r\n            default: false\r\n        },\r\n\r\n        'toolbar': {\r\n            type: Array,\r\n            default: null // use default from summernote (https://summernote.org/deep-dive/#custom-toolbar-popover)\r\n        },\r\n\r\n        'toolbar-image': {\r\n            type: Array,\r\n            default: null // use default from summernote (popover:{image:[...]})\r\n        },\r\n\r\n        'toolbar-link': {\r\n            type: Array,\r\n            default: null // use default from summernote (popover:{link:[...]})\r\n        },\r\n\r\n        'toolbar-table': {\r\n            type: Array,\r\n            default: null // use default from summernote (popover:{table:[...]})\r\n        },\r\n\r\n        'toolbar-air': {\r\n            type: Array,\r\n            default: null // use default from summernote (popover:{air:[...]})\r\n        },\r\n\r\n        'blockquote-breaking-level': { // https://summernote.org/deep-dive/#blockquote-breaking-level\r\n            type: Number,\r\n            default: 2\r\n        },\r\n\r\n        'style-tags': { // https://summernote.org/deep-dive/#custom-styles\r\n            type: Array,\r\n            default: null\r\n        },\r\n\r\n        'font-names': { // https://summernote.org/deep-dive/#custom-fontnames\r\n            type: Array,\r\n            default: null\r\n        },\r\n\r\n        'font-names-ignore-check': { // https://summernote.org/deep-dive/#custom-fontnames\r\n            type: Array,\r\n            default: null\r\n        },\r\n\r\n        'font-size-units': { // https://summernote.org/deep-dive/#custom-font-size-units\r\n            type: Array,\r\n            default: null\r\n        },\r\n\r\n        'line-heights': { // https://summernote.org/deep-dive/#custom-line-heights\r\n            type: Array,\r\n            default: null\r\n        },\r\n\r\n        'placeholder': {\r\n            type: String,\r\n            default: null\r\n        },\r\n\r\n        'dialogs-in-body': {\r\n            type: Boolean,\r\n            default: false\r\n        },\r\n\r\n        'dialogs-fade': {\r\n            type: Boolean,\r\n            default: false\r\n        },\r\n\r\n        'disable-drop': {\r\n            type: Boolean,\r\n            default: false\r\n        },\r\n\r\n        'disable-shortcuts': {\r\n            type: Boolean,\r\n            default: false\r\n        },\r\n\r\n        'disable-tab': {\r\n            type: Boolean,\r\n            default: false\r\n        },\r\n\r\n        'disable-spellcheck': {\r\n            type: Boolean,\r\n            default: false\r\n        },\r\n\r\n        'disable-grammar': {\r\n            type: Boolean,\r\n            default: false\r\n        }\r\n    },\r\n\r\n    methods: {\r\n        disable: function() {\r\n            this.editor.disable();\r\n            this.set('disabled', true);\r\n        },\r\n\r\n        empty: function() {\r\n            this.editor.empty();\r\n        },\r\n\r\n        enable: function() {\r\n            this.editor.enable();\r\n            this.set('disabled', false);\r\n        },\r\n\r\n        insertText: function(str) {\r\n            this.editor.insertText(str);\r\n        },\r\n\r\n        pasteHTML: function(str) {\r\n            this.editor.pasteHTML(str);\r\n        },\r\n\r\n        redo: function() {\r\n            this.editor.redo();\r\n        },\r\n\r\n        reset: function() {\r\n            this.editor.reset();\r\n        },\r\n\r\n        setValue: function(value) {\r\n            this.setValue(value);\r\n        },\r\n\r\n        undo: function() {\r\n            this.editor.undo();\r\n        },\r\n\r\n        status: function(message) {\r\n            this.editor.layoutInfo.editor.find('.note-status-output').html(message);\r\n        },\r\n\r\n        info: function(message) {\r\n            this.editor.layoutInfo.editor.find('.note-status-output').html('<div class=\"alert alert-info\">' + message + '</div>');\r\n        },\r\n\r\n        success: function(message) {\r\n            this.editor.layoutInfo.editor.find('.note-status-output').html('<div class=\"alert alert-success\">' + message + '</div>');\r\n        },\r\n\r\n        warning: function(message) {\r\n            this.editor.layoutInfo.editor.find('.note-status-output').html('<div class=\"alert alert-warning\">' + message + '</div>');\r\n        },\r\n\r\n        danger: function(message) {\r\n            this.editor.layoutInfo.editor.find('.note-status-output').html('<div class=\"alert alert-danger\">' + message + '</div>');\r\n        },\r\n\r\n        invoke: function(action) {\r\n            this.editor.invoke(action);\r\n        },\r\n    },\r\n\r\n    events: {\r\n        blur: Event,\r\n        change: Event,\r\n        changed: Event,\r\n        enter: Event,\r\n        focus: Event,\r\n        init: Event,\r\n        input: Event,\r\n        updated: Event,\r\n        buttonclick: Event\r\n    },\r\n\r\n    onBlur: function() {\r\n        if (this.orgValue != this.editor.code()) {\r\n            this.dispatchEvent('change');\r\n            var self = this;\r\n            dmx.nextTick(function() {\r\n                self.dispatchEvent('changed');\r\n            });\r\n        }\r\n        this.dispatchEvent('blur');\r\n    },\r\n\r\n    onChange: function() {\r\n        this.updated();\r\n        this.dispatchEvent('input');\r\n    },\r\n\r\n    onEnter: function() {\r\n        this.dispatchEvent('enter');\r\n    },\r\n\r\n    onFocus: function() {\r\n        this.orgValue = this.editor.code();\r\n        this.dispatchEvent('focus');\r\n    },\r\n\r\n    onInit: function() {\r\n        this.dispatchEvent('init');\r\n    },\r\n\r\n    toCamelCase: function(str) {\r\n        return str.replace(/-(\\w)/g, function(a, b) {\r\n            return b.toUpperCase();\r\n        });\r\n    },\r\n\r\n    $parseAttributes: function(node) {\r\n        var self = this;\r\n\r\n        dmx.BaseComponent.prototype.$parseAttributes.call(this, node);\r\n\r\n        dmx.dom.getAttributes(node).forEach(function(attr) {\r\n            if (attr.name == 'plugin') {\r\n                self.$addBinding(attr.value, function(value) {\r\n                    if (value) {\r\n                        self.plugins[this.toCamelCase(attr.argument)] = $.extend({}, $.summernote.options[attr.argument], value);\r\n                    } else {\r\n                        delete self.plugins[attr.argument];\r\n                    }\r\n\r\n                    self.plugins.updated = true;\r\n                });\r\n            }\r\n\r\n            if (attr.name == 'button') {\r\n                self.$addBinding(attr.value, function(value) {\r\n                    if (value && value.icon) {\r\n                        var name = this.toCamelCase(attr.argument);\r\n\r\n                        self.buttons.buttons[name] = function(context) {\r\n                            var ui = $.summernote.ui;\r\n\r\n                            var button = ui.button({\r\n                                contents: '<i class=\"' + value.icon + '\"/>',\r\n                                tooltip: value.tooltip || '',\r\n                                click: function() {\r\n                                    if (typeof value.click == 'string') {\r\n                                        dmx.parse(value.click, self);\r\n                                    }\r\n\r\n                                    self.dispatchEvent('buttonclick', null, {\r\n                                        editor: self.name,\r\n                                        button: name\r\n                                    });\r\n                                }\r\n                            });\r\n\r\n                            return button.render();\r\n                        };\r\n\r\n                        self.buttons.updated = true;\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    },\r\n\r\n    render: function(node) {\r\n        this.$node = node;\r\n    },\r\n\r\n    mounted: function() {\r\n        var value = this.$node.tagName == 'TEXTAREA' ? this.$node.value.trim() : this.$node.innerHTML.trim();\r\n\r\n        if (value.indexOf('{{') !== -1) {\r\n            this.$addBinding(value, this.setValue);\r\n        }\r\n\r\n        this.update({});\r\n    },\r\n\r\n    update: function(props) {\r\n        if (this.plugins.updated || this.buttons.updated || !dmx.equal(props, this.props)) {\r\n            delete this.plugins.updated;\r\n            delete this.buttons.updated;\r\n\r\n            if (props.value != this.props.value) {\r\n                this.setValue(this.props.value);\r\n            }\r\n\r\n            if (this.editor) {\r\n                this.editor.destroy();\r\n            }\r\n\r\n            this.initEditor();\r\n        }\r\n    },\r\n\r\n    updated: function() {\r\n        var oldValue = this.data.value;\r\n\r\n        if (this.editor) {\r\n            if ($(this.$node).summernote('isEmpty')) {\r\n                this.set('value', '');\r\n            } else {\r\n                this.set('value', this.editor.code());\r\n            }\r\n        } else {\r\n            var value = this.$node.tagName == 'TEXTAREA' ? this.$node.value.trim() : this.$node.innerHTML.trim();\r\n            this.set('value', value);\r\n        }\r\n\r\n        if (!this.updating && oldValue != this.data.value) {\r\n            this.isUpdated = true;\r\n            dmx.nextTick(function() {\r\n                this.isUpdated = false;\r\n                this.dispatchEvent('updated');\r\n            }, this);\r\n        }\r\n    },\r\n\r\n    beforeDestroy: function() {\r\n        this.editor.destroy();\r\n    },\r\n\r\n    setValue: function(value) {\r\n        if (this.editor) {\r\n            if (!value) {\r\n                this.editor.empty();\r\n            } else {\r\n                this.editor.code(value);\r\n            }\r\n        } else if (this.$node.tagName == 'TEXTAREA') {\r\n            this.$node.value = value;\r\n        } else {\r\n            this.$node.innerHTML = value;\r\n        }\r\n\r\n        this.updated();\r\n    },\r\n\r\n    initEditor: function() {\r\n        var config = dmx.clone(this.config);\r\n\r\n        config.height = this.props['height'];\r\n        config.minHeight = this.props['min-height'];\r\n        config.maxHeight = this.props['max-height'];\r\n        config.focus = this.props['autofocus'];\r\n        config.lang = this.props['lang'];\r\n        config.airMode = this.props['air-mode'];\r\n        config.placeholder = this.props['placeholder'];\r\n        config.dialogsInBody = this.props['dialogs-in-body'];\r\n        config.dialogsFade = this.props['dialogs-fade'];\r\n        config.disableDragAndDrop = this.props['disable-drop'];\r\n        config.shortcuts = !this.props['disable-shortcuts'];\r\n        config.tabDisable = this.props['disable-tab'];\r\n        config.spellCheck = !this.props['disable-spellcheck'];\r\n        config.disableGrammar = this.props['disable-grammar'];\r\n        config.blockquoteBreakingLevel = this.props['blockquote-breaking-level'];\r\n\r\n        if (Array.isArray(this.props['toolbar'])) {\r\n            // extra filter for empty group generated in Wappler\r\n            config.toolbar = this.props['toolbar'].filter(function(group) { return group.length; });\r\n        }\r\n\r\n        if (Array.isArray(this.props['toolbar-image'])) {\r\n            config.popover = config.popover || {};\r\n            config.popover.image = this.props['toolbar-image'].filter(function(group) { return group.length; });\r\n        }\r\n\r\n        if (Array.isArray(this.props['toolbar-link'])) {\r\n            config.popover = config.popover || {};\r\n            config.popover.link = this.props['toolbar-link'].filter(function(group) { return group.length; });\r\n        }\r\n\r\n        if (Array.isArray(this.props['toolbar-table'])) {\r\n            config.popover = config.popover || {};\r\n            config.popover.table = this.props['toolbar-table'].filter(function(group) { return group.length; });\r\n        }\r\n\r\n        if (Array.isArray(this.props['toolbar-air'])) {\r\n            config.popover = config.popover || {};\r\n            config.popover.air = this.props['toolbar-air'].filter(function(group) { return group.length; });\r\n        }\r\n\r\n        if (Array.isArray(this.props['style-tags'])) {\r\n            config.styleTags = this.props['style-tags'];\r\n        }\r\n\r\n        if (Array.isArray(this.props['font-names'])) {\r\n            config.fontNames = this.props['font-names'];\r\n        }\r\n\r\n        if (Array.isArray(this.props['font-names-ignore-check'])) {\r\n            config.fontNamesIgnoreCheck = this.props['font-names-ignore-check'];\r\n        }\r\n\r\n        if (Array.isArray(this.props['font-size-units'])) {\r\n            config.fontSizeUnits = this.props['font-size-units'];\r\n        }\r\n\r\n        if (Array.isArray(this.props['line-heights'])) {\r\n            config.lineHeights = this.props['line-heights'];\r\n        }\r\n\r\n        if (!$.summernote.lang[config.lang]) {\r\n            console.error('Summernote \"' + config.lang + '\" lang file must be included.')\r\n        }\r\n\r\n        $.extend(true, config, this.props.config, this.plugins, this.buttons, this.callbacks);\r\n\r\n        console.log('init summernote', config);\r\n\r\n        $(this.$node).summernote(config);\r\n        \r\n        this.editor = $(this.$node).data('summernote');\r\n\r\n        this.editor.layoutInfo.statusbar.find('.note-status-output').remove();\r\n\r\n        if (this.props.disabled) {\r\n            this.editor.disable();\r\n            this.set('disabled', true);\r\n        }\r\n\r\n        if (this.$node.hasAttribute('dmxDomId')) {\r\n            this.editor.layoutInfo.editor.attr('dmxDomId', this.$node.getAttribute('dmxDomId'));\r\n        }\r\n    },\r\n\r\n\r\n\r\n});\r\n"]}